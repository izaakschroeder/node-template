
//Load template system and DOM implementation
var template = require('template'), DOM = require('dom');

//Load up the two template providers that come with
var 
	FileSystemProvider = require('template/providers/filesystem'),
	StaticProvider = require('template/providers/static');

//Create the template engines
var 
	//First the file engine
	fileEngine = template.engine({
		provider: new FileSystemProvider({
			//List of prioritized paths to search for templates
			searchPaths: [
				"templates",
				"old-templates"
			]
		})
	
	}),
	
	//The static engine
	staticEngine = template.engine({
		provider: new StaticProvider({
			//Map of templates available
			templates: {
				test: '<html><head><title/></head><body><div id="Content"/><span class="Item"/><span class="Item"/><ul><li/></ul></body></html>'
			}
		})
	});


//Create some sample data; this would, for example, come from your database.
var data = {
	//Some simple strings
	title: "My Great Page",
	content: "Kitties",
	//Numbers
	item: 5*23.2,
	//Simple and complex arrays
	array: [ 1, 2, 3 ],
	articles: [
		{
			title: "From the Swamp",
			content: "Do or do not, there is no try.",
			author: "Yoda"
		},
		{
			title: "A Logical Mind",
			content: "There are only two things infinite: the universe and human stupidity. I'm not sure about the former.",
			author: "Einstein"
		}
	],
	//Objects
	person: {
		name: "Charles",
		address: "123 Fake Street"
	},
	//Property that isn't defined
	remove: undefined,
	//Empty property
	empty: null,
	//Property to be generated by function (data is the template data, element is the generated element)
	generated: function(data, element) {
		return "This is a "+element.tagName+" element";
	},
	//Property that generated DOM elements
	dom: function(data, element) {
		var element = new DOM.Element("div"); //Create a div
		element.appendChild(new DOM.Comment("Sample comment")); //Append a comment to it
		element.appendChild(new DOM.Text("Some text"));
		return element;
	}
}

//Bind CSS selectors to actual data
var bindings = {
	"title": "title", //title element gets the title data
	"#Content": "content", //element with id="Content" gets the content data
	".Item": "item", //etc
	"ul li": "array",
	"#Articles .Article": { //Within the .Article element
		data: "articles", //Use the data in articles
		bindings: { //And replace the following elements with the data in articles
			"h1": "title", //h1 gets the article title
			"div": "content", //etc
			".Author": "author"
		}
	},
	//Bind a function instead of a data property; argument is all the data
	"#Function": function(data) {
		return "There are "+data.articles.length+" articles!";
	},
	"#RemoveMe": "remove",
	"#EmptyMe": "empty",
	".Generated": "generated",
	"#DOM": "dom",
	"#Person": {
		data: "person",
		bindings: {
			".Name": "name",
			".Address": "address"
		}
	}
}

//Render the test template using the file engine
fileEngine.template("test", bindings, data, function(result) {
	console.log("File system-based engine finished rendering!");
	console.log(result.toString()); //Print the result
})

//Render the test template using the static engine
staticEngine.template("test", bindings, data, function(result) {
	console.log("Static-based engine finished rendering!");
	console.log(result.toString());
})
